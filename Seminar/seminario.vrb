\frametitle{Transformer Laws}
Transformer laws are expressed in scala in this way:
\begin{lstlisting}[language=scala]
def law1(a: A): Boolean =
	transformer.monadM1.unit(a).applyLiftT == transformer.unit(a)
def law2(m: M1[A])(f: A => M1[A]): Boolean =
	transformer.lift(transformer.monadM1.bind(m)(f)) == transformer.lift(m).applyBindT(transformer.lift[A] _ compose f)
def leftIdentity(a: A)(f: A => M1[M2[A]]): Boolean =
	transformer.unit(a).applyBindT(f) == f(a)
def rightIdentity(t: M1[M2[A]]): Boolean =
	t.applyBindT(t.applyUnitT) == t
def associativity(t: M1[M2[A]])(f: A => M1[M2[A]], g: A => M1[M2[A]]): Boolean =
	t.applyBindT(f).applyBindT(g) == t.applyBindT((x: A) => f(x).applyBindT(g))
\end{lstlisting}	
	We could test these laws through PBT ScalaCheck.
