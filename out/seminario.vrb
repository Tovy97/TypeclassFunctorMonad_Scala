\frametitle{Differences between Functors and Monads (2)}
But, let's try with a new function:
\begin{lstlisting}[language=scala]
val a : Option[Int] = Some(20)		
def f(x:Int) : Option[Int] = if (x == 0) None else Some(2 / x)
val temp1 = a.applyMap(f) // return Some(Some(0))
temp1.applyMap(f)// COMPILE ERROR
\end{lstlisting}	
	Here we stuck because, after the first step, we got an Option of Option of Int.
	We could manage this problem and adjust the second function	to work with Option of Option of Int,
	but in this way we would get an Option of Option of Option of Int as result type and we could continue getting more and more layers of Option.
	
	\pause
	
	Here monads come to help!
\begin{lstlisting}[language=scala]
val temp = a.bind(f) // return Some(0)
temp.bind(f) //None
\end{lstlisting}	
	We could continue to apply bind endless, without change the return type.
